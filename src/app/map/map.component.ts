import { Component, OnInit, HostListener } from '@angular/core';
import * as L from 'leaflet';
import { PopupService } from '../popup.service';

@Component({
  selector: 'app-map',
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.css'],
})
export class MapComponent implements OnInit {
  map: any;
  myGeoJson: any;
  currentFeature: any;
  showGraph: boolean;

  @HostListener('click', ['$event'])
  onClick(event: any) {
    if (event.target.tagName == 'BUTTON') {
      const id = parseInt(event.target.id);
      this.currentFeature = this.myGeoJson.features[id];
      this.showGraph = true;
    } else {
      this.showGraph = false;
    }
  }

  private initializeMap(): void {
    this.map = L.map('map', {
      center: [40.73061, -73.935242],
      zoom: 8,
    });

    const tiles = L.tileLayer(
      'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
      {
        maxZoom: 18,
        minZoom: 3,
        attribution:
          '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      }
    );

    tiles.addTo(this.map);

    function getColor(SV_Index2: any) {
      return SV_Index2 < 1 && SV_Index2 >= 0.9
        ? '#006400'
        : SV_Index2 < 0.9 && SV_Index2 >= 0.8
        ? '#008000'
        : SV_Index2 < 0.8 && SV_Index2 >= 0.7
        ? '#ADFF2F'
        : SV_Index2 < 0.7 && SV_Index2 >= 0.6
        ? '#90EE90'
        : SV_Index2 < 0.6 && SV_Index2 >= 0.5
        ? '#F0E68C'
        : SV_Index2 < 0.5 && SV_Index2 >= 0.4
        ? '#FFA07A'
        : SV_Index2 < 0.4 && SV_Index2 >= 0.3
        ? '#FD8D3C'
        : SV_Index2 < 0.3 && SV_Index2 >= 0.2
        ? '#FF6347'
        : SV_Index2 < 0.2 && SV_Index2 >= 0.1
        ? '#FF4500'
        : SV_Index2 < 0.1 && SV_Index2 >= 0
        ? '#8B4513'
        : '#FFEDA0';
    }
    function style(feature: any) {
      return {
        fillColor: getColor(feature.properties.SV_Index2),
        weight: 2,
        opacity: 1,
        color: 'white',
        dashArray: '3',
        fillOpacity: 0.7,
      };
    }

    L.geoJSON(this.myGeoJson.features, { style: style }).addTo(this.map);

    var layerGroup = L.geoJSON(this.myGeoJson, {
      onEachFeature: function (feature, layer) {
        layer.on('click', function () {
          layer.bindPopup(
            '<br> <button id="' +
              feature.id +
              '">Show Graph</button> <p><strong>Pop T: </strong>' +
              feature.properties.Pop_T +
              '</p><p><strong>Pop Dense: </strong>' +
              feature.properties.PopDense +
              '</p><p><strong>Prcnt U18 : </strong>' +
              feature.properties.Prcnt_U18 +
              '</p><p><strong>Under 18: </strong>' +
              feature.properties.Under18 +
              '</p><p><strong>Over 65: </strong>' +
              feature.properties.Over65 +
              '</p><p><strong>Prcnt HHBM : </strong>' +
              feature.properties.Prcnt_HHBM +
              '</p><p><strong>Prcnt Lng : </strong>' +
              feature.properties.Prcnt_Lng +
              '</p><p><strong>Poor Eng : </strong>' +
              feature.properties.PoorEng +
              '</p><p><strong>Minority : </strong>' +
              feature.properties.Minority +
              '</p><p><strong>Non white: </strong>' +
              feature.properties.Non_white +
              '</p><p><strong>Oc HU: </strong>' +
              feature.properties.Occ_HU +
              '</p><p><strong>HU: </strong>' +
              feature.properties.HU +
              '</p><p><strong>SV Index: </strong>' +
              feature.properties.SV_Index2 +
              '</p><p><strong>Rent: </strong>' +
              feature.properties.Prcnt_Rent +
              '</p><p><strong>Renters: </strong>' +
              feature.properties.Renters +
              '</p><p><strong>No Ca: </strong>' +
              feature.properties.Prcnt_NoCa +
              '</p><p><strong>HH NoCar: </strong>' +
              feature.properties.HH_NoCar +
              '</p><p><strong>Employment: </strong>' +
              feature.properties.Employment +
              '</p>',
            { maxHeight: 300, minWidth: 200 }
          );
        });
        layer.bindPopup(
          '<p><strong>NAMELSAD10:</strong>' +
            feature.properties.NAMELSAD10 +
            '</p><p><strong>State: </strong>' +
            feature.properties.State +
            '</p><p><strong>County: </strong>' +
            feature.properties.County +
            '</p><p><strong>Region:</strong> ' +
            feature.properties.Region +
            '</p>'
        );
        layer.on('mouseover', function () {
          layer.openPopup();
        });
      },
    }).addTo(this.map);
  }

  constructor(private popupService: PopupService) {
    this.showGraph = false;
  }

  ngOnInit(): void {
    this.popupService.getData().subscribe((mapData) => {
      mapData.features.map((el: any, index: number) => {
        el.id = index;
        return el;
      });
      this.myGeoJson = mapData;
      this.initializeMap();
    });
  }
}
